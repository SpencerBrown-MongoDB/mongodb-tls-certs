# Directories where files will be written by default. 
# However, you can prefix a filename with a directory path, and that will be used instead. 
directories:
  # files with only certificates are placed here
  public: tls
  # files with keys are placed here
  private: tls/private

# Extensions for created files.
extensions:
  # extension added to files with only keys
  key: key
  # extension used for files with certificates (perhaps also with keys, as in combo files)
  certificate: pem
  # extension used for SSH private key files
  sshkey: ""
  # extension used for SSH public key files
  sshpub: "pub"
  # extension used for SSH certificxate files
  sshcert: "cer"

# Defaults for subject name components.
# Any certificate that does not specify some of these components receives this default value.
subject:
  O: MongoDB
  CN: Repro

# Create keyfiles; keyfiles are files with 32 random bytes stored in base64 format (44 bytes total)
keyfiles:
  keyfile:

# Create SSH keypairs; these are like filename (private key) and filename.pub (public key)
sshkeypairs:
  tls/clients/spencer.brown:
  tls/clients/joe.smith:
    rsabits: 4096

# Create certificates and keys
certificates:
  root-ca:
    type: rootCA
    encrypt: true
    rsabits: 4096
    valid: 7300
    subject:
      O: MongoDB
      OU: Root-CA
      CN: Repro
  signing-ca:
    type: intermediateCA
    valid: 365
    issuer: root-ca
    subject:
      OU: Signing-CA
  ocsp:
    type: OCSPSigning
    issuer: signing-ca
    subject:
      OU: OCSP Response Signing
  server:
    type: server
    issuer: signing-ca
    subject:
      OU: Server
    hosts:
      - mongodb-local.computer
  client:
    type: client
    issuer: signing-ca
    subject:
      OU: Client

# Create combined files
combos:
  # the certificateKeyFile combined file
  server-key-cert:
    - server.key
    - server.pem
  client-key-cert:
    - client.key
    - client.pem
  # the combined file with the CA certificate chain
  ca-chain:
    - signing-ca.pem
    - root-ca.pem